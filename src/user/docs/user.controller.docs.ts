import { applyDecorators } from '@nestjs/common';
import {
  ApiTags,
  ApiOperation,
  ApiResponse,
  ApiBearerAuth,
  ApiBody,
  ApiParam,
} from '@nestjs/swagger';
import { Role } from '@prisma/client';

export const ApiUserTag = () => ApiTags('游녻 User');

export const ApiCreateUserDoc = () =>
  applyDecorators(
    ApiOperation({
      summary: 'Criar novo usu치rio',
      description: 'Cria um novo usu치rio no sistema',
    }),
    ApiResponse({
      status: 201,
      description: 'Usu치rio criado com sucesso',
    }),
    ApiResponse({
      status: 400,
      description: 'Dados inv치lidos ou email j치 cadastrado',
    }),
  );

export const ApiFindAllUsersDoc = () =>
  applyDecorators(
    ApiBearerAuth(),
    ApiOperation({
      summary: 'Listar todos os usu치rios',
      description: 'Retorna uma lista com todos os usu치rios cadastrados',
    }),
    ApiResponse({
      status: 200,
      description: 'Lista de usu치rios retornada com sucesso',
    }),
    ApiResponse({ status: 403, description: 'Acesso negado' }),
  );

export const ApiForgotPasswordDoc = () =>
  applyDecorators(
    ApiOperation({
      summary: 'Solicitar recupera칞칚o de senha',
      description: 'Envia um c칩digo de recupera칞칚o para o email do usu치rio',
    }),
    ApiBody({
      schema: {
        type: 'object',
        properties: {
          email: {
            type: 'string',
            example: 'usuario@exemplo.com',
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: 'C칩digo de recupera칞칚o enviado com sucesso',
    }),
    ApiResponse({ status: 404, description: 'Email n칚o encontrado' }),
  );

export const ApiValidateCodeDoc = () =>
  applyDecorators(
    ApiOperation({
      summary: 'Validar c칩digo de recupera칞칚o',
      description: 'Valida o c칩digo enviado para o email do usu치rio',
    }),
    ApiBody({
      schema: {
        type: 'object',
        properties: {
          code: {
            type: 'string',
            example: '123456',
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: 'C칩digo validado com sucesso',
    }),
    ApiResponse({ status: 400, description: 'C칩digo inv치lido ou expirado' }),
  );

export const ApiResetPasswordDoc = () =>
  applyDecorators(
    ApiOperation({
      summary: 'Redefinir senha',
      description:
        'Define uma nova senha para o usu치rio ap칩s valida칞칚o do c칩digo',
    }),
    ApiBody({
      schema: {
        type: 'object',
        properties: {
          newPassword: {
            type: 'string',
            example: 'NovaSenha@123',
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: 'Senha redefinida com sucesso',
    }),
    ApiResponse({
      status: 400,
      description: 'Senha inv치lida ou sess칚o expirada',
    }),
  );

export const ApiFindUserByIdDoc = () =>
  applyDecorators(
    ApiBearerAuth(),
    ApiOperation({
      summary: 'Buscar usu치rio por ID',
      description: 'Retorna os dados de um usu치rio espec칤fico',
    }),
    ApiParam({
      name: 'id',
      description: 'ID do usu치rio',
      example: '1',
    }),
    ApiResponse({
      status: 200,
      description: 'Usu치rio encontrado com sucesso',
    }),
    ApiResponse({ status: 404, description: 'Usu치rio n칚o encontrado' }),
  );

export const ApiUpdateUserDoc = () =>
  applyDecorators(
    ApiBearerAuth(),
    ApiOperation({
      summary: 'Atualizar usu치rio',
      description: 'Atualiza os dados de um usu치rio espec칤fico',
    }),
    ApiParam({
      name: 'id',
      description: 'ID do usu치rio',
      example: '1',
    }),
    ApiResponse({
      status: 200,
      description: 'Usu치rio atualizado com sucesso',
    }),
    ApiResponse({ status: 404, description: 'Usu치rio n칚o encontrado' }),
  );

export const ApiUpdateRoleByEmailDoc = () =>
  applyDecorators(
    ApiBearerAuth(),
    ApiOperation({
      summary: 'Atualizar papel do usu치rio por email',
      description:
        'Atualiza o papel de um usu치rio usando seu email (requer ADMIN)',
    }),
    ApiParam({
      name: 'email',
      description: 'Email do usu치rio',
      example: 'usuario@exemplo.com',
    }),
    ApiBody({
      schema: {
        type: 'object',
        properties: {
          role: {
            type: 'string',
            enum: ['USER', 'ADMIN', 'MODERATOR'],
            example: 'MODERATOR',
          },
        },
      },
    }),
    ApiResponse({
      status: 200,
      description: 'Papel do usu치rio atualizado com sucesso',
    }),
    ApiResponse({ status: 403, description: 'Acesso negado' }),
    ApiResponse({ status: 404, description: 'Usu치rio n칚o encontrado' }),
  );

export const ApiRemoveUserDoc = () =>
  applyDecorators(
    ApiBearerAuth(),
    ApiOperation({
      summary: 'Remover usu치rio',
      description: 'Remove um usu치rio do sistema (requer ADMIN)',
    }),
    ApiParam({
      name: 'id',
      description: 'ID do usu치rio',
      example: '1',
    }),
    ApiResponse({
      status: 200,
      description: 'Usu치rio removido com sucesso',
    }),
    ApiResponse({ status: 403, description: 'Acesso negado' }),
    ApiResponse({ status: 404, description: 'Usu치rio n칚o encontrado' }),
  );
